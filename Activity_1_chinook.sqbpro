<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Soylu/Desktop/SQL/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3528"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainalbums"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="300"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--SÄ°NGLE-ROW SUBQUERIES
--1-
SELECT TrackId, name, Milliseconds
FROM tracks
WHERE Milliseconds = (SELECT MAX(Milliseconds)
					FROM tracks);

--2- 
SELECT TrackId, name, Milliseconds
FROM tracks
WHERE Milliseconds = (SELECT MIN(Milliseconds)
					FROM tracks);

--3-
SELECT TrackId, name, Bytes, (SELECT AVG(bytes) FROM tracks) as General_Average
FROM tracks
WHERE Bytes &gt; (Select AVG(Bytes) FROM tracks)
ORDER BY Bytes DESC;

--MULTIPLE-ROW SUBQUERIES
--1-
SELECT CustomerId, FirstName, LastName
FROM customers
WHERE SupportRepId IN (SELECT EmployeeId
				FROM employees
				WHERE FirstName IN (&quot;Jane&quot;, &quot;Margaret&quot;) AND LastName IN (&quot;Peacock&quot;, &quot;Park&quot;));


--2-
SELECT c.CustomerId, c.FirstName, c.LastName
FROM customers as c
JOIN  employees as e
ON c.SupportRepId = e.EmployeeId
WHERE e.FirstName IN (&quot;Jane&quot;, &quot;Margaret&quot;) AND e.LastName IN (&quot;Peacock&quot;, &quot;Park&quot;);

DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements

--1- 
CREATE TABLE courses
	(CourseId PRIMARY KEY,
	CourseName NOT NULL,
	EmployeeId ,
	CoursePrice ,
	FOREIGN KEY (EmployeeId) REFERENCES employees(EmployeeId));

--2-
INSERT INTO courses (CourseId, CourseName, EmployeeId, CoursePrice)
VALUES (1, &quot;Sql&quot;, 3, &quot;100$&quot;),
		(2, &quot;Data Science&quot;, 1, &quot;150$&quot;),
		(3, &quot;Full Stack&quot;, 2, &quot;125$&quot;),
		(4, &quot;DevOps&quot;, 4, &quot;125$&quot;),
		(5, &quot;Python&quot;, 5, &quot;75$&quot;);

--3- 
DELETE FROM courses
WHERE CourseId = 5;

--4-
ALTER TABLE courses
ADD StartDate NOT NULL;

--5- 
ALTER TABLE courses
DROP CoursePrice;

--6-
DROP TABLE courses;

</sql><current_tab id="0"/></tab_sql></sqlb_project>
